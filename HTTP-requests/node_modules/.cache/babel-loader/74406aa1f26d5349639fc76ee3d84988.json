{"ast":null,"code":"var _jsxFileName = \"/Users/stefan/Desktop/Demo Git/React-Udemy-Course/HTTP-requests/src/App.js\";\nimport React, { useCallback, useEffect, useState } from 'react';\nimport MoviesList from './components/MoviesList';\nimport './App.css';\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const fetchMoviesHandler = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch('https://swapi.dev/api/films/');\n      if (!response.ok) {\n        throw new Error('Something went wrong');\n      }\n      const data = await response.json();\n      const tranformedMovies = data.results.map(movieData => {\n        return {\n          id: movieData.episode_id,\n          title: movieData.title,\n          openingText: movieData.opening_crawl,\n          releaseData: movieData.release_date\n        };\n      });\n      setMovies(tranformedMovies);\n    } catch (error) {\n      setError(error.message);\n    }\n    setIsLoading(false);\n  }, []);\n  useEffect(() => {\n    fetchMoviesHandler();\n  }, [fetchMoviesHandler]);\n  let content = /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 17\n    }\n  }, \"No Movies Found!\");\n  if (movies.length > 0) {\n    content = /*#__PURE__*/React.createElement(MoviesList, {\n      movies: movies,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 15\n      }\n    });\n  }\n  if (error) {\n    content = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 15\n      }\n    }, error);\n  }\n  if (isLoading) {\n    content = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 15\n      }\n    }, \"Loading...\");\n  }\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: fetchMoviesHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, \"Fetch Movies\")), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }, content));\n}\nexport default App;\n\n// fetch data with promise/then\n\n// function fetchMoviesHandler() {\n//   setIsLoading(true)\n\n//   fetch('https://swapi.dev/api/films/')\n//     .then(response => response.json())\n//     .then(data => {\n\n//       const tranformedMovies = data.results.map(movieData => {\n//         return {\n//           id: movieData.episode_id,\n//           title: movieData.title,\n//           openingText: movieData.opening_crawl,\n//           releaseData: movieData.release_date\n//         }\n//       })\n\n//       setMovies(tranformedMovies)\n//       setIsLoading(false)\n//     })\n// }","map":{"version":3,"names":["React","useCallback","useEffect","useState","MoviesList","App","movies","setMovies","isLoading","setIsLoading","error","setError","fetchMoviesHandler","response","fetch","ok","Error","data","json","tranformedMovies","results","map","movieData","id","episode_id","title","openingText","opening_crawl","releaseData","release_date","message","content","length"],"sources":["/Users/stefan/Desktop/Demo Git/React-Udemy-Course/HTTP-requests/src/App.js"],"sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\n\nimport MoviesList from './components/MoviesList';\nimport './App.css';\n\nfunction App() {\n\n  const [movies, setMovies] = useState([])\n  const [isLoading, setIsLoading] = useState(false)\n  const [error, setError] = useState(null)\n\n\n  const fetchMoviesHandler = useCallback(async () => {\n    setIsLoading(true)\n    setError(null)\n\n    try {\n      const response = await fetch('https://swapi.dev/api/films/')\n\n      if (!response.ok) {\n        throw new Error('Something went wrong')\n      }\n\n      const data = await response.json()\n\n      const tranformedMovies = data.results.map(movieData => {\n        return {\n          id: movieData.episode_id,\n          title: movieData.title,\n          openingText: movieData.opening_crawl,\n          releaseData: movieData.release_date\n        }\n      })\n\n      setMovies(tranformedMovies)\n\n    } catch (error) {\n      setError(error.message)\n    }\n    setIsLoading(false)\n\n  }, [])\n\n  useEffect(() => {\n    fetchMoviesHandler()\n  }, [fetchMoviesHandler])\n\n  let content = <p>No Movies Found!</p>\n\n  if (movies.length > 0) {\n    content = <MoviesList movies={movies} />\n  }\n  if (error) {\n    content = <p>{error}</p>\n  }\n  if (isLoading) {\n    content = <p>Loading...</p>\n  }\n\n\n  return (\n    <React.Fragment>\n      <section>\n        <button onClick={fetchMoviesHandler}>Fetch Movies</button>\n      </section>\n      <section>{content}</section>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n\n\n  // fetch data with promise/then\n\n  // function fetchMoviesHandler() {\n  //   setIsLoading(true)\n\n  //   fetch('https://swapi.dev/api/films/')\n  //     .then(response => response.json())\n  //     .then(data => {\n\n  //       const tranformedMovies = data.results.map(movieData => {\n  //         return {\n  //           id: movieData.episode_id,\n  //           title: movieData.title,\n  //           openingText: movieData.opening_crawl,\n  //           releaseData: movieData.release_date\n  //         }\n  //       })\n\n  //       setMovies(tranformedMovies)\n  //       setIsLoading(false)\n  //     })\n  // }\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,WAAW,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE/D,OAAOC,UAAU,MAAM,yBAAyB;AAChD,OAAO,WAAW;AAElB,SAASC,GAAG,GAAG;EAEb,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGJ,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACK,SAAS,EAAEC,YAAY,CAAC,GAAGN,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACO,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAGxC,MAAMS,kBAAkB,GAAGX,WAAW,CAAC,YAAY;IACjDQ,YAAY,CAAC,IAAI,CAAC;IAClBE,QAAQ,CAAC,IAAI,CAAC;IAEd,IAAI;MACF,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;MAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,sBAAsB,CAAC;MACzC;MAEA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,EAAE;MAElC,MAAMC,gBAAgB,GAAGF,IAAI,CAACG,OAAO,CAACC,GAAG,CAACC,SAAS,IAAI;QACrD,OAAO;UACLC,EAAE,EAAED,SAAS,CAACE,UAAU;UACxBC,KAAK,EAAEH,SAAS,CAACG,KAAK;UACtBC,WAAW,EAAEJ,SAAS,CAACK,aAAa;UACpCC,WAAW,EAAEN,SAAS,CAACO;QACzB,CAAC;MACH,CAAC,CAAC;MAEFtB,SAAS,CAACY,gBAAgB,CAAC;IAE7B,CAAC,CAAC,OAAOT,KAAK,EAAE;MACdC,QAAQ,CAACD,KAAK,CAACoB,OAAO,CAAC;IACzB;IACArB,YAAY,CAAC,KAAK,CAAC;EAErB,CAAC,EAAE,EAAE,CAAC;EAENP,SAAS,CAAC,MAAM;IACdU,kBAAkB,EAAE;EACtB,CAAC,EAAE,CAACA,kBAAkB,CAAC,CAAC;EAExB,IAAImB,OAAO,gBAAG;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,sBAAuB;EAErC,IAAIzB,MAAM,CAAC0B,MAAM,GAAG,CAAC,EAAE;IACrBD,OAAO,gBAAG,oBAAC,UAAU;MAAC,MAAM,EAAEzB,MAAO;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAAG;EAC1C;EACA,IAAII,KAAK,EAAE;IACTqB,OAAO,gBAAG;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAAIrB,KAAK,CAAK;EAC1B;EACA,IAAIF,SAAS,EAAE;IACbuB,OAAO,gBAAG;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,gBAAiB;EAC7B;EAGA,oBACE,oBAAC,KAAK,CAAC,QAAQ;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACb;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACE;IAAQ,OAAO,EAAEnB,kBAAmB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,kBAAsB,CAClD,eACV;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAAUmB,OAAO,CAAW,CACb;AAErB;AAEA,eAAe1B,GAAG;;AAGhB;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}